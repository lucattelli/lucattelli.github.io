<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Bruno Lucattelli</title>
    <link>https://lucattelli.github.io/posts/</link>
    <description>Recent content in Posts on Bruno Lucattelli</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Fri, 07 Jul 2023 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://lucattelli.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    <item>
      <title>Hiding Python dictionaries in classes</title>
      <link>https://lucattelli.github.io/posts/en/hiding_python_dictionaries_in_classes/</link>
      <pubDate>Fri, 07 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lucattelli.github.io/posts/en/hiding_python_dictionaries_in_classes/</guid>
      <description>&lt;p&gt;I have been doing Python development again for the past two months as I&amp;rsquo;m working on the backends for some of Newfront&amp;rsquo;s AI services. I like to use Python&amp;rsquo;s type hinting system, and I have been using dataclasses for defining, validating and passing data around.&lt;/p&gt;
&lt;p&gt;Frequently, our services will need to talk to external APIs to fetch data that often is provided as JSON. Whenever that&amp;rsquo;s the case, I see my beautiful, typed code, become contaminated with things like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import requests
headers = {
  &amp;#39;Accept&amp;#39;: &amp;#39;application/json&amp;#39;
}
 
r = requests.get(
    &amp;#39;https://api.carbonintensity.org.uk/intensity&amp;#39;, 
    params={}, 
    headers = headers
)
 
response_data = r.json()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Assuming the response schema is something like that:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{
  &amp;#34;data&amp;#34;:[
    {
    &amp;#34;from&amp;#34;: &amp;#34;2018-01-20T12:00Z&amp;#34;,
    &amp;#34;to&amp;#34;: &amp;#34;2018-01-20T12:30Z&amp;#34;,
    &amp;#34;intensity&amp;#34;: {
      &amp;#34;forecast&amp;#34;: 266,
      &amp;#34;actual&amp;#34;: 263,
      &amp;#34;index&amp;#34;: &amp;#34;moderate&amp;#34;
    }
  }]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, we might need to so something like this to get the forecast and actual values:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;forecast = response_data[&amp;#34;data&amp;#34;][0][&amp;#34;intensity&amp;#34;][&amp;#34;forecast&amp;#34;]
actual = response_data[&amp;#34;data&amp;#34;][0][&amp;#34;intensity&amp;#34;][&amp;#34;actual&amp;#34;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Which is AWFUL! First, it doesn&amp;rsquo;t express the schema very well as lists and dictionaries have items referenced using the same square brackets. Also, if you return this data to your application, every place needing some piece of this data will have to run it, see how the data looks like, and then do something like that. Lastly, that introduces a lot of opportunities for exceptions. Any changes to the schema have potential to break several places in the code. And then you&amp;rsquo;ll have to fix this leaked, buggy, bad code.&lt;/p&gt;
&lt;p&gt;Recently, I started wrapping that into a class that, using properties, can help others consume the data more safely.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class CarbonIntensityAPIResponseItem:

    def __init__(self, raw_item) -&amp;gt; None:
        self.__item = raw_item

    @property
    def from(self) -&amp;gt; Optional[datetime]:
        raw_from = self.__item.get(&amp;#34;from&amp;#34;)
        if raw_from is not None:
            return datetime.strptime(raw_from, &amp;#34;%Y-%m-%dT%H:%MZ&amp;#34;) 

    @property
    def to(self) -&amp;gt; Optional[datetime]:
        raw_to = self.__item.get(&amp;#34;to&amp;#34;)
        if raw_to is not None:
            return datetime.strptime(raw_to, &amp;#34;%Y-%m-%dT%H:%MZ&amp;#34;) 

    @property
    def intensity_forecast(self) -&amp;gt; Optional[int]:
        raw_forecast = self.__item.get(&amp;#34;intensity&amp;#34;, {}).get(&amp;#34;forecast&amp;#34;)
        if raw_forecast is not None:
            return raw_forecast

    @property
    def intensity_actual(self) -&amp;gt; Optional[int]:
        raw_actual = self.__item.get(&amp;#34;intensity&amp;#34;, {}).get(&amp;#34;actual&amp;#34;)
        if raw_actual is not None:
            return raw_actual

    @property
    def intensity_index(self) -&amp;gt; Optional[str]:
        raw_index = self.__item.get(&amp;#34;intensity&amp;#34;, {}).get(&amp;#34;index&amp;#34;)
        if raw_index is not None:
            return raw_index

class CarbonIntensityAPIResponse:
    
    def __init__(self, raw_response) -&amp;gt; None:
        self.__response = raw_response

    def __get_data(self) -&amp;gt; list[dict]:
        self.__response.get(&amp;#34;data&amp;#34;, []) 

    @property
    def items(self) -&amp;gt; int:
       return len(self.__get_data())

    def get_item(self, idx: int) -&amp;gt; CarbonIntensityAPIResponseItem:
        raw_item = self.__get_data()[idx]
        return CarbonIntensityAPIResponseItem(raw_item)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If instead of returning that JSON object you return this class, now you have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Defined a typed interface to which other places in the code can depend on.&lt;/li&gt;
&lt;li&gt;Concentrated all the data extraction logic in one place. If the API changes, we have only one place to change.&lt;/li&gt;
&lt;li&gt;Much more expressive. As the return types are saying, some values are optional and code can deal with that without having to read the API docs or assume some contract, only to be proven wrong later by a bug when processing a null property.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When compared to the previous example, here&amp;rsquo;s how someone could use the same forecast and actual values from the class replacing the dictionary response:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;item = response_data.get_item(0)
forecast = item.intensity_forecast
actual = item.intensity_actual
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;See? Much cleaner! Much safer!&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>A good introduction to monads</title>
      <link>https://lucattelli.github.io/posts/en/a_good_introduction_to_monads/</link>
      <pubDate>Sat, 30 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lucattelli.github.io/posts/en/a_good_introduction_to_monads/</guid>
      <description>&lt;p&gt;This &lt;a href=&#34;https://www.youtube.com/watch?v=C2w45qRc3aU&#34;&gt;video&lt;/a&gt; helped me have an initial understanding of monads. I recommend if you are new to this subject.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>What to ask during the interview process</title>
      <link>https://lucattelli.github.io/posts/en/what_to_ask_during_the_interview/</link>
      <pubDate>Wed, 29 Dec 2021 10:55:50 -0300</pubDate>
      
      <guid>https://lucattelli.github.io/posts/en/what_to_ask_during_the_interview/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Company goal/mission?&lt;/li&gt;
&lt;li&gt;Company stage and size?&lt;/li&gt;
&lt;li&gt;Who&amp;rsquo;s the CEO (what&amp;rsquo;s their background? product, sales, engineering?)&lt;/li&gt;
&lt;li&gt;Technology stack?&lt;/li&gt;
&lt;li&gt;PTO policy?&lt;/li&gt;
&lt;li&gt;Tell me more about the company culture?&lt;/li&gt;
&lt;li&gt;How decisions are made?&lt;/li&gt;
&lt;li&gt;How new ideas are introduced?&lt;/li&gt;
&lt;li&gt;How you ensure the quality of your software?&lt;/li&gt;
&lt;li&gt;How you ensure the security of your software?&lt;/li&gt;
&lt;li&gt;How you ensure the scalability of your software?&lt;/li&gt;
&lt;li&gt;How frequent do you ship to production?&lt;/li&gt;
&lt;li&gt;How is software delivered?&lt;/li&gt;
&lt;li&gt;How you deal with regressions?&lt;/li&gt;
&lt;li&gt;How (and how often) do you collect user input and feedback?&lt;/li&gt;
&lt;li&gt;How are teams organized?&lt;/li&gt;
&lt;li&gt;How the services are organized?&lt;/li&gt;
&lt;li&gt;How technical debt is managed?&lt;/li&gt;
&lt;li&gt;What&amp;rsquo;s the core hours it&amp;rsquo;s expected to be online for synchronous collaboration with the team?&lt;/li&gt;
&lt;li&gt;Is there a performance review process in place? How does it work?&lt;/li&gt;
&lt;li&gt;How frequent will I get feedback on what I&amp;rsquo;m doing?&lt;/li&gt;
&lt;li&gt;How does the company help me learn new things (for example, personal stipend, available online learning platforms, etc)&lt;/li&gt;
&lt;li&gt;Tell me about a hard decision you had to make recently&lt;/li&gt;
&lt;li&gt;Tell me about a highlight while working at this company&lt;/li&gt;
&lt;li&gt;Tell me about a lowlight while working at this company&lt;/li&gt;
&lt;li&gt;How is support done?&lt;/li&gt;
&lt;li&gt;How much data driven is the company?&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Learning New Programming Languages</title>
      <link>https://lucattelli.github.io/posts/en/learning_new_programming_languages/</link>
      <pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lucattelli.github.io/posts/en/learning_new_programming_languages/</guid>
      <description>&lt;p&gt;A pragmatic programmer must be learning new things, constantly. A new programming language per year is a good average according to the PragProg book. After you decided you’ll learn a new language, the important question is: which language?&lt;/p&gt;
&lt;p&gt;Maybe you can start with a language that’s similar to the ones you already know. That’s a good start. But once you’re starting to form this new habit, &lt;a href=&#34;https://href.li/?http://www.paulgraham.com/weird.html&#34;&gt;try learning languages that are weird to you&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;More valuable than learning how to solve similar problems using different languages is actually learning about problems you’re not familiar with that these weird languages aim to solve. Expanding your knowledge about approaches and design ideas will help you write better code.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>About Hostnames</title>
      <link>https://lucattelli.github.io/posts/en/about_hostnames/</link>
      <pubDate>Wed, 11 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://lucattelli.github.io/posts/en/about_hostnames/</guid>
      <description>&lt;p&gt;Giving your machine a good hostname is important. This small gesture demonstrates how much you care about your setup. If you don’t know your hostname, you’ll have a hard time remotely connecting to it. Also, when using tmux, people will have to look at that weird name for a long time.&lt;/p&gt;
&lt;p&gt;Have respect for your machine. &lt;a href=&#34;https://href.li/?http://seriss.com/people/erco/unixtools/hostnames.html&#34;&gt;Give it a good hostname&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    
  </channel>
</rss>
